{"version":3,"sources":["components/addItem.js","components/todoLists.js","App.js","serviceWorker.js","index.js"],"names":["addItem","state","content","handleChange","e","_this","setState","target","value","handleSubmit","preventDefault","console","log","props","addTodo","react_default","a","createElement","onSubmit","this","type","onChange","Component","todoLists","_ref","todos","removeTodo","todoItem","length","map","todo","className","onClick","id","key","App","todoItems","removeTodoItem","filter","item","addTodoItem","Math","random","concat","Object","toConsumableArray","components_todoLists","components_addItem","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAiCeA,6MA9BXC,MAAQ,CACJC,QAAQ,MAEZC,aAAe,SAACC,GACZC,EAAKC,SAAS,CACVJ,QAAQE,EAAEG,OAAOC,WAGzBC,aAAe,SAACL,GACZA,EAAEM,iBACFC,QAAQC,IAAIP,EAAKJ,OAEjBI,EAAKQ,MAAMC,QAAQT,EAAKJ,OACxBI,EAAKC,SAAS,CACVJ,QAAQ,8EAIX,OACLa,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,SAAUC,KAAKV,cACrBM,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOC,SAAUF,KAAKhB,aAAcK,MAAOW,KAAKlB,MAAMC,mBAvBpDoB,aCmBPC,EAnBG,SAAAC,GAAsB,IAApBC,EAAoBD,EAApBC,MAAMC,EAAcF,EAAdE,WAChBC,EAAWF,EAAMG,OACnBH,EAAMI,IAAI,SAAAC,GACN,OACIf,EAAAC,EAAAC,cAAA,OAAKc,UAAU,kBAAkBC,QAAS,WAAKN,EAAWI,EAAKG,KAAMC,IAAKJ,EAAKG,IAC/ElB,EAAAC,EAAAC,cAAA,YAAQa,EAAK5B,YAKrBa,EAAAC,EAAAC,cAAA,KAAGc,UAAU,UAAb,+CAEJ,OACAhB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,oBAAoBJ,IC6BxBQ,6MAnCblC,MAAQ,CACNmC,UAAU,CACR,CAACH,GAAG,EAAG/B,QAAS,kBAChB,CAAC+B,GAAG,EAAG/B,QAAS,oCAGpBmC,eAAiB,SAACJ,GAChBtB,QAAQC,IAAIqB,GACZ,IAAMG,EAAW/B,EAAKJ,MAAMmC,UAAUE,OAAO,SAAAC,GAAI,OAC9CA,EAAKN,KAAOA,IAEf5B,EAAKC,SAAS,CACZ8B,iBAGJI,YAAc,SAACb,GACbA,EAASM,GAAKQ,KAAKC,SACnB,IAAIN,EAAS,GAAAO,OAAAC,OAAAC,EAAA,EAAAD,CAAOvC,EAAKJ,MAAMmC,WAAlB,CAA4BT,IACzCtB,EAAKC,SAAS,CACZ8B,uFAIF,OACErB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,OACbhB,EAAAC,EAAAC,cAAA,MAAIc,UAAU,sBAAd,sBACAhB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,aACbhB,EAAAC,EAAAC,cAAC6B,EAAD,CAAWrB,MAAON,KAAKlB,MAAMmC,UAAWV,WAAYP,KAAKkB,iBACzDtB,EAAAC,EAAAC,cAAC8B,EAAD,CAASjC,QAASK,KAAKqB,uBA7BflB,aCIE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a5c2cc12.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass addItem extends Component {\r\n    state = {\r\n        content:\"\"\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({\r\n            content:e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        console.log(this.state)\r\n        // console.log(this.props)\r\n        this.props.addTodo(this.state);\r\n        this.setState({\r\n            content:'' \r\n        })\r\n    }\r\n    render(){\r\n         return ( \r\n    <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n        <label >Enter your todo item</label>\r\n        <input type=\"text\" onChange={this.handleChange} value={this.state.content}></input>\r\n        </form>  \r\n    </div>    \r\n    )\r\n    }\r\n}\r\n    \r\n\r\nexport default addItem","import React from 'react';\r\n\r\nconst todoLists = ({todos,removeTodo})=>{\r\n    const todoItem = todos.length ? (\r\n        todos.map(todo =>{\r\n            return(\r\n                <div className=\"collection item\" onClick={()=>{removeTodo(todo.id)}} key={todo.id}>\r\n                <span >{todo.content}</span>\r\n                </div>\r\n            )\r\n        })\r\n    ):(\r\n        <p className=\"center\">You do not have any more to do. Well done!!</p>\r\n    )\r\n    return ( \r\n    <div className=\"todos collection\">{todoItem}</div>    \r\n    )\r\n\r\n}\r\n    \r\n\r\nexport default todoLists","import React, { Component } from 'react';\r\nimport  Additem from './components/addItem';\r\n// import List from './components/List';\r\nimport Todolists from './components/todoLists';\r\n// import Endpoint from './components/Server-end-point';\r\n\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    todoItems:[\r\n      {id:1, content: 'shop for cloth'},\r\n      {id:2, content: 'Go to viewing center by noon'}\r\n    ]\r\n  }\r\n  removeTodoItem = (id)=>{\r\n    console.log(id);\r\n    const todoItems =this.state.todoItems.filter(item=>\r\n       item.id !== id\r\n    )\r\n    this.setState({\r\n      todoItems\r\n    })\r\n  }\r\n  addTodoItem = (todoItem) =>{\r\n    todoItem.id = Math.random();\r\n    let todoItems = [...this.state.todoItems,todoItem];\r\n    this.setState({\r\n      todoItems\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1 className=\"center yellow-text\">Simple Todo's List</h1>\r\n        <div className=\"container\">\r\n          <Todolists todos={this.state.todoItems} removeTodo={this.removeTodoItem}/>\r\n          <Additem addTodo={this.addTodoItem}/>\r\n       </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}